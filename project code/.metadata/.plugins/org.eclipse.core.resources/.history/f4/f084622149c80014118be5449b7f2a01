import java.util.Date;
import java.util.LinkedList;


public class TrailingState
{
	LinkedList<Move> moves;
	TrailingState firstMoreRecent;
	
	public void insertMove(Move m)
	{
		boolean conflictFound = false;
		long timeDifferenceBetweenConflicts;
		for(int i=0; i<moves.size(); i++)
		{
			Move listedMove = moves.get(i);
			if(m.earlierThan(listedMove))
			{
				moves.add(i, m);
			}
			else
			{
				if(listedMove.conflictsWith(m) && !conflictFound)
				{
					conflictFound = true;
					timeDifferenceBetweenConflicts = listedMove.executionTimeDifference(m);
				}
			}
		}
		
		if(conflictFound)
		{
			// test using "timeDifferenceBetweenConflicts" whether the more recent trailingState catch this conflict.
		}
	}
}


//beschrijft een move-opdracht, inclusief timestamp wanneer die uitgevoer moet worden
public class Move
{
	Date executionTime;
	
	//tests whether this move needs to be applied earlier than the given move.
	public boolean earlierThan(Move m)
	{
		return executionTime.before(m.executionTime);
	}
	
	//get the absolute time difference between the execution times of these 2 moves in milliseconds.
	public long executionTimeDifference(Move m)
	{
		return Math.abs(executionTime.getTime() - m.executionTime.getTime());
	}
	
	//tests whether this moves conflicts with the given move. So if applying them in different order could result in a different gamestate.
	public boolean conflictsWith(Move m)
	{
		
	}
}